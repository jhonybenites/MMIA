
cv03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000510  08000510  00010518  2**0
                  CONTENTS
  4 .ARM          00000000  08000510  08000510  00010518  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000510  08000518  00010518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000510  08000510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000518  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000518  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000404  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ef  00000000  00000000  00010944  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  00010b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00010bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000475e  00000000  00000000  00010c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009a0  00000000  00000000  0001535e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000181fc  00000000  00000000  00015cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002defa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  0002df78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000480 	.word	0x08000480

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000480 	.word	0x08000480

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

#include "stm32f0xx.h"
#include "sct.h"

int main (void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	sct_init();
 8000226:	f000 f86f 	bl	8000308 <sct_init>
	sct_led(0x7A5C36DE);
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <main+0x74>)
 800022c:	0018      	movs	r0, r3
 800022e:	f000 f837 	bl	80002a0 <sct_led>
	for (volatile uint32_t j=0; j<300000; j++) {}
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	e002      	b.n	800023e <main+0x1e>
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	3301      	adds	r3, #1
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	4a15      	ldr	r2, [pc, #84]	; (8000298 <main+0x78>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d9f8      	bls.n	8000238 <main+0x18>

	uint16_t count=0;
 8000246:	230e      	movs	r3, #14
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2200      	movs	r2, #0
 800024c:	801a      	strh	r2, [r3, #0]
	while(1) {
		sct_value(count);
 800024e:	230e      	movs	r3, #14
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	0018      	movs	r0, r3
 8000256:	f000 f877 	bl	8000348 <sct_value>

		for (volatile uint32_t j=0; j<300000; j++) {}
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	e002      	b.n	8000266 <main+0x46>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3301      	adds	r3, #1
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <main+0x78>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d9f8      	bls.n	8000260 <main+0x40>
		if (count==999)	{
 800026e:	230e      	movs	r3, #14
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <main+0x7c>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d104      	bne.n	8000284 <main+0x64>
			count=0;
 800027a:	230e      	movs	r3, #14
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	2200      	movs	r2, #0
 8000280:	801a      	strh	r2, [r3, #0]
 8000282:	e7e4      	b.n	800024e <main+0x2e>
		}else{
			count+=111;
 8000284:	220e      	movs	r2, #14
 8000286:	18bb      	adds	r3, r7, r2
 8000288:	18ba      	adds	r2, r7, r2
 800028a:	8812      	ldrh	r2, [r2, #0]
 800028c:	326f      	adds	r2, #111	; 0x6f
 800028e:	801a      	strh	r2, [r3, #0]
		sct_value(count);
 8000290:	e7dd      	b.n	800024e <main+0x2e>
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	7a5c36de 	.word	0x7a5c36de
 8000298:	000493df 	.word	0x000493df
 800029c:	000003e7 	.word	0x000003e7

080002a0 <sct_led>:
#define sct_sdi(x) do { if (x) GPIOB->BSRR = (1 << 4); else GPIOB->BRR = (1 << 4); } while (0)
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)

void sct_led(uint32_t value)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	for (uint8_t j=0; j<32; j++) {
 80002a8:	230f      	movs	r3, #15
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	e019      	b.n	80002e6 <sct_led+0x46>
		sct_sdi(value & 1);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2201      	movs	r2, #1
 80002b6:	4013      	ands	r3, r2
 80002b8:	d003      	beq.n	80002c2 <sct_led+0x22>
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <sct_led+0x64>)
 80002bc:	2210      	movs	r2, #16
 80002be:	619a      	str	r2, [r3, #24]
 80002c0:	e002      	b.n	80002c8 <sct_led+0x28>
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <sct_led+0x64>)
 80002c4:	2210      	movs	r2, #16
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
		value >>= 1;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	085b      	lsrs	r3, r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
		sct_clk(1);
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <sct_led+0x64>)
 80002d0:	2208      	movs	r2, #8
 80002d2:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <sct_led+0x64>)
 80002d6:	2208      	movs	r2, #8
 80002d8:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint8_t j=0; j<32; j++) {
 80002da:	210f      	movs	r1, #15
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	3201      	adds	r2, #1
 80002e4:	701a      	strb	r2, [r3, #0]
 80002e6:	230f      	movs	r3, #15
 80002e8:	18fb      	adds	r3, r7, r3
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b1f      	cmp	r3, #31
 80002ee:	d9e0      	bls.n	80002b2 <sct_led+0x12>
	}

	sct_nla(1);
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <sct_led+0x64>)
 80002f2:	2220      	movs	r2, #32
 80002f4:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <sct_led+0x64>)
 80002f8:	2220      	movs	r2, #32
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b004      	add	sp, #16
 8000302:	bd80      	pop	{r7, pc}
 8000304:	48000400 	.word	0x48000400

08000308 <sct_init>:

void sct_init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <sct_init+0x34>)
 800030e:	695a      	ldr	r2, [r3, #20]
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <sct_init+0x34>)
 8000312:	2180      	movs	r1, #128	; 0x80
 8000314:	02c9      	lsls	r1, r1, #11
 8000316:	430a      	orrs	r2, r1
 8000318:	615a      	str	r2, [r3, #20]
	GPIOB->MODER |= GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER10_0;
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <sct_init+0x38>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <sct_init+0x38>)
 8000320:	4908      	ldr	r1, [pc, #32]	; (8000344 <sct_init+0x3c>)
 8000322:	430a      	orrs	r2, r1
 8000324:	601a      	str	r2, [r3, #0]
	sct_noe(0);
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <sct_init+0x38>)
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	00d2      	lsls	r2, r2, #3
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
	sct_led(0);
 800032e:	2000      	movs	r0, #0
 8000330:	f7ff ffb6 	bl	80002a0 <sct_led>
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400
 8000344:	00100540 	.word	0x00100540

08000348 <sct_value>:

void sct_value(uint16_t value)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	0002      	movs	r2, r0
 8000350:	1dbb      	adds	r3, r7, #6
 8000352:	801a      	strh	r2, [r3, #0]
	uint32_t reg=0x00000000;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
					0b0110000000001111 << 0,

			},

	};
	reg |= reg_values[0][value / 100 % 10];
 8000358:	1dbb      	adds	r3, r7, #6
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	2164      	movs	r1, #100	; 0x64
 800035e:	0018      	movs	r0, r3
 8000360:	f7ff fed2 	bl	8000108 <__udivsi3>
 8000364:	0003      	movs	r3, r0
 8000366:	b29b      	uxth	r3, r3
 8000368:	210a      	movs	r1, #10
 800036a:	0018      	movs	r0, r3
 800036c:	f7ff ff52 	bl	8000214 <__aeabi_uidivmod>
 8000370:	000b      	movs	r3, r1
 8000372:	b29b      	uxth	r3, r3
 8000374:	001a      	movs	r2, r3
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <sct_value+0x98>)
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	58d3      	ldr	r3, [r2, r3]
 800037c:	68fa      	ldr	r2, [r7, #12]
 800037e:	4313      	orrs	r3, r2
 8000380:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8000382:	1dbb      	adds	r3, r7, #6
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	210a      	movs	r1, #10
 8000388:	0018      	movs	r0, r3
 800038a:	f7ff febd 	bl	8000108 <__udivsi3>
 800038e:	0003      	movs	r3, r0
 8000390:	b29b      	uxth	r3, r3
 8000392:	210a      	movs	r1, #10
 8000394:	0018      	movs	r0, r3
 8000396:	f7ff ff3d 	bl	8000214 <__aeabi_uidivmod>
 800039a:	000b      	movs	r3, r1
 800039c:	b29b      	uxth	r3, r3
 800039e:	001a      	movs	r2, r3
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <sct_value+0x98>)
 80003a2:	320a      	adds	r2, #10
 80003a4:	0092      	lsls	r2, r2, #2
 80003a6:	58d3      	ldr	r3, [r2, r3]
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	4313      	orrs	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	210a      	movs	r1, #10
 80003b4:	0018      	movs	r0, r3
 80003b6:	f7ff ff2d 	bl	8000214 <__aeabi_uidivmod>
 80003ba:	000b      	movs	r3, r1
 80003bc:	b29b      	uxth	r3, r3
 80003be:	001a      	movs	r2, r3
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <sct_value+0x98>)
 80003c2:	3214      	adds	r2, #20
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	58d3      	ldr	r3, [r2, r3]
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	4313      	orrs	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	0018      	movs	r0, r3
 80003d2:	f7ff ff65 	bl	80002a0 <sct_led>

}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b004      	add	sp, #16
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	08000498 	.word	0x08000498

080003e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e4:	480d      	ldr	r0, [pc, #52]	; (800041c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ea:	490e      	ldr	r1, [pc, #56]	; (8000424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <LoopForever+0xe>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0b      	ldr	r2, [pc, #44]	; (800042c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000400:	4c0b      	ldr	r4, [pc, #44]	; (8000430 <LoopForever+0x16>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800040e:	e000      	b.n	8000412 <LoopFillZerobss+0x8>
 8000410:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 8000412:	f000 f811 	bl	8000438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000416:	f7ff ff03 	bl	8000220 <main>

0800041a <LoopForever>:

LoopForever:
    b LoopForever
 800041a:	e7fe      	b.n	800041a <LoopForever>
  ldr   r0, =_estack
 800041c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000428:	08000518 	.word	0x08000518
  ldr r2, =_sbss
 800042c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000430:	2000001c 	.word	0x2000001c

08000434 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC_IRQHandler>
	...

08000438 <__libc_init_array>:
 8000438:	b570      	push	{r4, r5, r6, lr}
 800043a:	2600      	movs	r6, #0
 800043c:	4d0c      	ldr	r5, [pc, #48]	; (8000470 <__libc_init_array+0x38>)
 800043e:	4c0d      	ldr	r4, [pc, #52]	; (8000474 <__libc_init_array+0x3c>)
 8000440:	1b64      	subs	r4, r4, r5
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	42a6      	cmp	r6, r4
 8000446:	d109      	bne.n	800045c <__libc_init_array+0x24>
 8000448:	2600      	movs	r6, #0
 800044a:	f000 f819 	bl	8000480 <_init>
 800044e:	4d0a      	ldr	r5, [pc, #40]	; (8000478 <__libc_init_array+0x40>)
 8000450:	4c0a      	ldr	r4, [pc, #40]	; (800047c <__libc_init_array+0x44>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	42a6      	cmp	r6, r4
 8000458:	d105      	bne.n	8000466 <__libc_init_array+0x2e>
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	00b3      	lsls	r3, r6, #2
 800045e:	58eb      	ldr	r3, [r5, r3]
 8000460:	4798      	blx	r3
 8000462:	3601      	adds	r6, #1
 8000464:	e7ee      	b.n	8000444 <__libc_init_array+0xc>
 8000466:	00b3      	lsls	r3, r6, #2
 8000468:	58eb      	ldr	r3, [r5, r3]
 800046a:	4798      	blx	r3
 800046c:	3601      	adds	r6, #1
 800046e:	e7f2      	b.n	8000456 <__libc_init_array+0x1e>
 8000470:	08000510 	.word	0x08000510
 8000474:	08000510 	.word	0x08000510
 8000478:	08000510 	.word	0x08000510
 800047c:	08000514 	.word	0x08000514

08000480 <_init>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr

0800048c <_fini>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr
